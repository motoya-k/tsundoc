package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"

	"github.com/motoya-k/tsundoc/internal/domain/book"
	"github.com/motoya-k/tsundoc/internal/interface/graphql/generated"
)

// SaveBook is the resolver for the saveBook field.
func (r *mutationResolver) SaveBook(ctx context.Context, content string) (*book.Book, error) {
	// Temporary: use fixed user ID for testing
	userID := "test-user-123"
	// userID, ok := ctx.Value("userID").(string)
	// if !ok || userID == "" {
	// 	return nil, fmt.Errorf("unauthorized: user ID not found in context")
	// }

	return r.BookUseCase.SaveBook(ctx, userID, "", "", "", content, "", []string{})
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id string, title *string, tags []string) (*book.Book, error) {
	// Temporary: use fixed user ID for testing
	userID := "test-user-123"
	// userID, ok := ctx.Value("userID").(string)
	// if !ok || userID == "" {
	// 	return nil, fmt.Errorf("unauthorized: user ID not found in context")
	// }

	titleValue := ""
	if title != nil {
		titleValue = *title
	}

	book, err := r.BookUseCase.GetBook(ctx, id, userID)
	if err != nil {
		return nil, err
	}

	return r.BookUseCase.UpdateBook(ctx, id, userID, titleValue, book.Author, book.Description, book.Content, book.URL, tags)
}

// MergeBooks is the resolver for the mergeBooks field.
func (r *mutationResolver) MergeBooks(ctx context.Context, bookIds []string) (*book.Book, error) {
	// Temporary: use fixed user ID for testing
	userID := "test-user-123"
	// userID, ok := ctx.Value("userID").(string)
	// if !ok || userID == "" {
	// 	return nil, fmt.Errorf("unauthorized: user ID not found in context")
	// }

	return r.BookUseCase.MergeBooks(ctx, userID, bookIds)
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*book.Book, error) {
	// Temporary: use fixed user ID for testing
	userID := "test-user-123"
	// userID, ok := ctx.Value("userID").(string)
	// if !ok || userID == "" {
	// 	return nil, fmt.Errorf("unauthorized: user ID not found in context")
	// }

	return r.BookUseCase.GetBook(ctx, id, userID)
}

// MyBooks is the resolver for the myBooks field.
func (r *queryResolver) MyBooks(ctx context.Context, keyword *string) ([]*book.Book, error) {
	// Temporary: use fixed user ID for testing
	userID := "test-user-123"
	// userID, ok := ctx.Value("userID").(string)
	// if !ok || userID == "" {
	// 	return nil, fmt.Errorf("unauthorized: user ID not found in context")
	// }

	keywordValue := ""
	if keyword != nil {
		keywordValue = *keyword
	}

	return r.BookUseCase.GetMyBooks(ctx, userID, keywordValue)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
