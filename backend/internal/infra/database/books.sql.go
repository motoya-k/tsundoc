// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateBook = `-- name: CreateBook :one
INSERT INTO books (title, author, description, tags, content, url, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, title, author, description, tags, content, url, user_id, created_at, updated_at
`

type CreateBookParams struct {
	Title       string      `json:"title"`
	Author      pgtype.Text `json:"author"`
	Description pgtype.Text `json:"description"`
	Tags        []string    `json:"tags"`
	Content     pgtype.Text `json:"content"`
	Url         pgtype.Text `json:"url"`
	UserID      string      `json:"user_id"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, CreateBook,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.Tags,
		arg.Content,
		arg.Url,
		arg.UserID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Tags,
		&i.Content,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteBook = `-- name: DeleteBook :exec
DELETE FROM books 
WHERE id = $1 AND user_id = $2
`

type DeleteBookParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID string      `json:"user_id"`
}

func (q *Queries) DeleteBook(ctx context.Context, arg DeleteBookParams) error {
	_, err := q.db.Exec(ctx, DeleteBook, arg.ID, arg.UserID)
	return err
}

const GetBook = `-- name: GetBook :one
SELECT id, title, author, description, tags, content, url, user_id, created_at, updated_at
FROM books 
WHERE id = $1 AND user_id = $2
`

type GetBookParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID string      `json:"user_id"`
}

func (q *Queries) GetBook(ctx context.Context, arg GetBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, GetBook, arg.ID, arg.UserID)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Tags,
		&i.Content,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetBooksByUser = `-- name: GetBooksByUser :many
SELECT id, title, author, description, tags, content, url, user_id, created_at, updated_at
FROM books 
WHERE user_id = $1
ORDER BY updated_at DESC
`

func (q *Queries) GetBooksByUser(ctx context.Context, userID string) ([]Book, error) {
	rows, err := q.db.Query(ctx, GetBooksByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Tags,
			&i.Content,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchBooks = `-- name: SearchBooks :many
SELECT id, title, author, description, tags, content, url, user_id, created_at, updated_at
FROM books 
WHERE user_id = $1 
  AND (
    title ILIKE '%' || $2 || '%' 
    OR description ILIKE '%' || $2 || '%'
    OR $2 = ANY(tags)
  )
ORDER BY updated_at DESC
`

type SearchBooksParams struct {
	UserID  string      `json:"user_id"`
	Column2 pgtype.Text `json:"column_2"`
}

func (q *Queries) SearchBooks(ctx context.Context, arg SearchBooksParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, SearchBooks, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Tags,
			&i.Content,
			&i.Url,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateBook = `-- name: UpdateBook :one
UPDATE books 
SET title = $2, author = $3, description = $4, tags = $5, content = $6, url = $7, updated_at = NOW()
WHERE id = $1 AND user_id = $8
RETURNING id, title, author, description, tags, content, url, user_id, created_at, updated_at
`

type UpdateBookParams struct {
	ID          pgtype.UUID `json:"id"`
	Title       string      `json:"title"`
	Author      pgtype.Text `json:"author"`
	Description pgtype.Text `json:"description"`
	Tags        []string    `json:"tags"`
	Content     pgtype.Text `json:"content"`
	Url         pgtype.Text `json:"url"`
	UserID      string      `json:"user_id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, UpdateBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.Tags,
		arg.Content,
		arg.Url,
		arg.UserID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Tags,
		&i.Content,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
